[["index.html", "Data-Scientific Programming Notes Preface", " Data-Scientific Programming Notes Andrew Sage 2022-01-21 Preface These are the class notes for the Winter 2022 section of cmsc/stat 205: Data-Scientific Programming at Lawrence University. In addition to these notes, you will find helpful examples in our primary course text R for Data Science by Wickham and Grolemund and our secondary text Modern Data Science with R by Baumer, Kaplan, and Horton. "],["data-visualization.html", "Chapter 1 Data Visualization 1.1 Loading and Exploring Data 1.2 More Graphics 1.3 Advanced Data Graphics", " Chapter 1 Data Visualization These notes correspond to material from Chapter 3 of R for Data Science by Wickham and Grolemund. 1.1 Loading and Exploring Data Loading Data and R packages We'll load an R package called tidyverse. This is a poweful R package that is useful for creating graphics, and wrangling data, and many other tasks. If the package is not already installed, you will need to install it, using the instructions in Assignment 0. Once installed, we load the package using the library() command. You will need to do this everytime you start a new R session and want to use the package. library(tidyverse) We will work with a dataset containing information on movies released in 2018. Data were collected from https://www.imdb.com/. We first read in the data from my github repository, where it is posted, and assign it the name &quot;movies&quot; movies &lt;- read_csv(&quot;https://raw.githubusercontent.com/AndrewjSage/andrewjsage.github.io/master/Datasets/movies2018.csv&quot;) Exploring the Data The head() command displays the first 6 rows of the dataset head(movies) ## # A tibble: 6 x 8 ## title IMDB_score MPAA_rating genre meta_score run_time vote gross ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Black Panther 7.3 PG-13 Action 88 134 480585 700. ## 2 Avengers: Infi… 8.5 PG-13 Action 68 149 604460 679. ## 3 Incredibles 2 7.7 PG Anima… 80 118 187214 609. ## 4 Jurassic World… 6.2 PG-13 Action 51 128 204123 418. ## 5 Aquaman 7.2 PG-13 Action 55 143 200231 334. ## 6 Deadpool 2 7.8 R Comedy 66 119 361973 325. The glimpse() command returns a summary of the information contained in the dataset, including variable types. glimpse(movies) ## Rows: 272 ## Columns: 8 ## $ title &lt;chr&gt; &quot;Black Panther&quot;, &quot;Avengers: Infinity War&quot;, &quot;Incredibles 2&quot;… ## $ IMDB_score &lt;dbl&gt; 7.3, 8.5, 7.7, 6.2, 7.2, 7.8, 6.3, 7.8, 7.1, 8.1, 7.8, 7.0… ## $ MPAA_rating &lt;chr&gt; &quot;PG-13&quot;, &quot;PG-13&quot;, &quot;PG&quot;, &quot;PG-13&quot;, &quot;PG-13&quot;, &quot;R&quot;, &quot;PG&quot;, &quot;PG-1… ## $ genre &lt;chr&gt; &quot;Action&quot;, &quot;Action&quot;, &quot;Animation&quot;, &quot;Action&quot;, &quot;Action&quot;, &quot;Come… ## $ meta_score &lt;dbl&gt; 88, 68, 80, 51, 55, 66, 51, 86, 70, 49, 88, 62, 35, 71, 87… ## $ run_time &lt;dbl&gt; 134, 149, 118, 128, 143, 119, 86, 147, 118, 134, 136, 135,… ## $ vote &lt;dbl&gt; 480585, 604460, 187214, 204123, 200231, 361973, 26370, 220… ## $ gross &lt;dbl&gt; 700.06, 678.82, 608.58, 417.72, 334.14, 324.59, 270.60, 22… Categorical variables take on groups or categories, rather than numeric values. In R, these might be coded as logical &lt;logi&gt;, character &lt;chr&gt;, factor &lt;fct&gt; and ordered factor &lt;ord&gt;. Quantitative variables take on meaningful numeric values. These include numeric &lt;num&gt;, integer &lt;int&gt;, and double &lt;dbl&gt;. The summary() command returns a summary of each variable in the dataset summary(movies) ## title IMDB_score MPAA_rating genre ## Length:272 Min. :2.100 Length:272 Length:272 ## Class :character 1st Qu.:5.700 Class :character Class :character ## Mode :character Median :6.500 Mode :character Mode :character ## Mean :6.408 ## 3rd Qu.:7.100 ## Max. :8.600 ## ## meta_score run_time vote gross ## Min. : 9.00 Min. : 84.0 Min. : 121 Min. : 0.110 ## 1st Qu.:46.00 1st Qu.: 98.0 1st Qu.: 2952 1st Qu.: 1.025 ## Median :58.00 Median :110.0 Median : 12580 Median : 6.605 ## Mean :57.55 Mean :111.8 Mean : 38608 Mean : 41.552 ## 3rd Qu.:69.00 3rd Qu.:121.0 3rd Qu.: 37363 3rd Qu.: 43.318 ## Max. :93.00 Max. :188.0 Max. :604460 Max. :700.060 ## NA&#39;s :47 1.1.1 Creating Graphics The ggplot command is used to create graphics in tidyverse. Example 1.1.1 Basic Scatterplot We create a scatterplot of IMDB score vs. runtime for 2018 movies. ggplot(data = movies) + geom_point(mapping = aes(x = run_time, y = IMDB_score)) Example 1.1.2 Scatterplot with text labels Out of curiousity, let's add the names of the films that scores especially high or low. We'll see the filter command more later on. ggplot(data = movies) + geom_point(mapping = aes(x = run_time, y = IMDB_score)) + geom_text(data=movies %&gt;% filter(IMDB_score &gt; 8 | IMDB_score &lt; 4 ), aes(x = run_time, y = IMDB_score, label = title, vjust=-1), size = 2, color=&quot;red&quot;) Example 1.1.3 Scatterplot with color, shape, and size We can use color, shape, and size to convey information about other variables. We'll use color for genre, shape for MPAA rating, and size for gross revenue generated. Note that shape should be used for factor variables, and size for numeric variables. Color may be used for either. ggplot(data = movies) + geom_point(mapping = aes(x = run_time, y = IMDB_score, color=genre, shape=MPAA_rating, size=gross)) Example 1.1.4 Changing Axis Labels and Hiding Legend ggplot(data = movies) + geom_point(mapping = aes(x = run_time, y = IMDB_score, color=genre, shape=MPAA_rating, size=gross)) + xlab(&quot;Runtime (in minutes)&quot;)+ ylab(&quot;IMDB Score (out of 10)&quot;) Practice 1.1.5 Fill in the blanks to create a scatterplot that shows IMDB score on the y-axis and critics score (meta_score) on the x-axis. Use color to denote MPAA_rating, and size to represent the number of votes on IMDB (vote). Add appropriate axis lables. When you are done, remove eval=FALSE from the braces in the chunk heading, so your code will run. ggplot(data = ___________) + geom_point(mapping = aes(x = ____________, y = ___________, color=__________, size=________)) + xlab(&quot;_____________&quot;)+ylab(&quot;__________&quot;) 1.2 More Graphics 1.2.1 Visualizing Quantitative Data (Continued) Example 1.2.1: Faceting facet_wrap() allows us to display a graph in multiple panels. You should only facet on categorical variables. ggplot(data = movies) + geom_point(mapping = aes(x = run_time, y = IMDB_score, color=MPAA_rating, size=gross)) + facet_wrap(~ genre, nrow = 2) + xlab(&quot;Runtime (in minutes)&quot;)+ ylab(&quot;IMDB Score (out of 10)&quot;) facet_grid() allows us to display a graph using a grid of categorical variables. ggplot(data = movies) + geom_point(mapping = aes(x = run_time, y = IMDB_score, size=gross)) + facet_grid( MPAA_rating ~ genre) + xlab(&quot;Runtime (in minutes)&quot;)+ ylab(&quot;IMDB Score (out of 10)&quot;) Example 1.2.2: Histograms Histograms are useful for visualizing a quantitative variable. ggplot(data = movies) + geom_histogram(mapping = aes(x = run_time), color=&quot;white&quot;, fill=&quot;blue&quot; ) + xlab(&quot;Run time (in minutes&quot;) Example 1.2.3: Boxplots Boxplots can be used to graph a single quantitative variable alone, or plotted against a categorical variable. coordflip() flips the x and y axes. ggplot(data = movies, mapping = aes(x = MPAA_rating, y = run_time)) + geom_boxplot() + xlab(&quot;MPAA Rating&quot;) + ylab(&quot;Run time (in minutes)&quot;) + coord_flip() Practice 1.2.4 Fill in the blanks to create a histogram to visualize IMDB scores. ggplot(data = _________) + geom_histogram(mapping = aes(x = _________), color=&quot;white&quot;, fill=&quot;blue&quot; ) + xlab(&quot;_____________&quot;) Practice 1.2.5 Use faceting to display the histogram of scores for each genre separately. ggplot(data = _________) + geom_histogram(mapping = aes(x = _________), color=&quot;white&quot;, fill=&quot;blue&quot; ) + xlab(&quot;____________&quot;) + facet_wrap(~_______, nrow=2) Practice 1.2.6 Fill in the blanks to create a boxplot to visualize IMDB scores by genre. ggplot(data = movies, mapping = aes(x = ___________, y = ___________)) + geom_boxplot() + xlab(&quot;____________&quot;) + ylab(&quot;_______________&quot;) + coord_flip() 1.2.2 Visualizing Categorical Data Example 1.2.7: Bar Graph Bar graphs are used to display frequencies for categorical variables. ggplot(data = movies) + stat_count(mapping = aes(x = genre), fill=&quot;blue&quot;) + xlab(&quot;MPAA Rating&quot;) Example 1.2.8 Reordering Bars Notice that, by default, R orders the bars alphabetically. We might wish to specify a different order, perhaps using decreasing bar height. The fct_infreq command automatically orders factor variables according to frequency. See this link for more ordering options. ggplot(data = movies) + stat_count(mapping = aes(x = fct_infreq(genre)), fill=&quot;blue&quot;) + xlab(&quot;MPAA Rating&quot;) Example 1.2.9 Relative Frequency Bar Graph ggplot(data = movies) + stat_count(mapping = aes(x = genre, y = ..prop.., group = 1), fill=&quot;blue&quot;) + xlab(&quot;MPAA Rating&quot;) Practice 1.2.10 Fill in the blanks to create a bar graph displaying the number of films with each MPAA rating ggplot(data = ___________) + stat_count(mapping = aes(x = ____________), fill=&quot;blue&quot;) + xlab(&quot;_____________&quot;) Practice 1.2.11 Copy/paste your code from above and modify it to display the bars in descending order of heights. # type code here Practice 1.2.12 Copy/paste your code from above and modify it to display proportions, rather than counts on the y-axis. # type code here Example 1.2.13 Stacked Bar Graph A stacked bar graph allows us to display information about two or more categorical variables. ggplot(data = movies) + stat_count(mapping = aes(x = genre, fill=MPAA_rating) ) + xlab(&quot;Genre&quot;) Example 1.2.14 Stacked Bar Graph with Equal Heights When comparing percentages, it is useful to have bars of the same height. We can do this using position=&quot;fill&quot;. ggplot(data = movies) + stat_count(mapping = aes(x = genre, fill=MPAA_rating), position=&quot;fill&quot; ) + xlab(&quot;Genre&quot;) Example 1.2.15 Side-by-Side Bar Graph Sometimes it is helpful to have side-by-side bars of different heights. This is done using position=&quot;dodge&quot;. ggplot(data = movies) + stat_count(mapping = aes(x = genre, fill=MPAA_rating), position=&quot;dodge&quot; ) + xlab(&quot;Genre&quot;) Example 1.2.16 Height Specified by Variable Let's narrow down our dataset to the 5 most popular films, using the filter() command. movies_subset &lt;- movies %&gt;% filter(title %in% c(&quot;Black Panther&quot;, &quot;Avengers: Infinity War&quot;, &quot;Incredibles 2&quot;, &quot;Jurassic World: Fallen Kingdom&quot;, &quot;Aquaman&quot;)) Let's create a bar graph that displays the number of IMDB users who rated each of these films (i.e. that vote) variable. Now, the height of the bars is given by variable in the dataset, rather than the number of occurances of a factor variable. We use the stat=identity command to tell R that the bar height is determined by the y-variable, rather than freqency. ggplot(data=movies_subset) + geom_bar(mapping=aes(x=title, y=vote), stat = &quot;identity&quot;, fill=&quot;blue&quot;) + xlab(&quot;Title&quot;) + ylab(&quot;Votes&quot;) We can use fct_reorder() to reorder the bars by decreasing height. See link for more. ggplot(data=movies_subset) + geom_bar(mapping=aes(x=fct_reorder(.f=title, .x=vote, .desc=TRUE), y=vote), stat = &quot;identity&quot;, fill=&quot;blue&quot;) + xlab(&quot;Title&quot;) + ylab(&quot;Votes&quot;) Practice 1.2.17 Height Specified by Variable Copy/paste the code from Example 1.2.16 and modify it to display the 5 movies' gross revenue (gross) on the y-axis. Arrange in descending order. # type code here 1.3 Advanced Data Graphics Let's take a look at some graphics that go beyond the basics. We'll recreate two graphics that orignally appeared in a fivethirtyeight.com blogpost How to tell Someone's Age when All You Know is Her Name This example comes from Chapter 3 of Modern Data Science with R, by Baumer, Kaplan, and Horton. library(tidyverse) library(babynames) library(mdsr) Babynames dataset Babynames_data &lt;- make_babynames_dist() head(Babynames_data) ## # A tibble: 6 x 9 ## year sex name n prop alive_prob count_thousands age_today ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1900 F Mary 16706 0.0526 0 16.7 114 ## 2 1900 F Helen 6343 0.0200 0 6.34 114 ## 3 1900 F Anna 6114 0.0192 0 6.11 114 ## 4 1900 F Margaret 5304 0.0167 0 5.30 114 ## 5 1900 F Ruth 4765 0.0150 0 4.76 114 ## 6 1900 F Elizabeth 4096 0.0129 0 4.10 114 ## # … with 1 more variable: est_alive_today &lt;dbl&gt; Example 1.3.1: Age Distribution for a Given Name Choosing Name and Gender Babyname &lt;- Babynames_data %&gt;% filter(name == &quot;Joseph&quot; &amp; sex == &quot;M&quot;) name_plot &lt;- ggplot(data=Babyname, aes(x=year)) + geom_bar(aes(y=est_alive_today/1000), fill=&quot;#b2d7e9&quot;, color=&quot;white&quot;, stat=&quot;identity&quot;) name_plot See the R Cookbook for more information on color palette. Setting Axis Limits name_plot &lt;- name_plot + ylim(c(0,42)) name_plot Adding Line name_plot &lt;- name_plot + geom_line(aes(y=count_thousands), size=2) name_plot Axis Labels name_plot &lt;- name_plot + xlab(&quot;Year&quot;) + ylab(&quot;Number of people (in thousands)&quot;) name_plot Adding Text name_plot &lt;- name_plot + ggtitle(&quot;Age Distribution of American Boys Named Joseph&quot;) + geom_text(x=1935, y=40, label=&quot;Number of Josephs\\nborn each year&quot;) + geom_text(x=1915, y=13, label=&quot;Number of Josephs \\nborn each year\\nestimated to be alive on \\n 1/1/2014&quot;, color=&quot;#b2d7e9&quot;) name_plot Adding Median Age #install.packages(&quot;Hmisc&quot;) library(Hmisc) #wtd.quantile &lt;- Hmisc::wtd.quantile median_yob &lt;- with(Babyname, wtd.quantile(year, est_alive_today, probs=0.5)) median_yob ## 50% ## 1975 name_plot &lt;- name_plot + geom_bar(stat=&quot;identity&quot;, color=&quot;white&quot;, fill=&quot;#008fd5&quot;, aes(y = ifelse(year==median_yob, est_alive_today / 1000 , 0))) name_plot name_plot &lt;- name_plot + geom_text(x=2003, y=40, label=&quot;The median \\nliving Joseph \\nis 37 years old&quot;, color=&quot;darkgray&quot;) + geom_curve(x=1995, xend=1974, y=40, yend=24, arrow=arrow(length=unit(0.3, &quot;cm&quot;)), curvature=0.5) name_plot Example 1.3.2: Common Female Names Some data prep com_fem &lt;- Babynames_data %&gt;% # hack added in 2nd edition filter(n &gt; 100) %&gt;% filter(sex == &quot;F&quot;) %&gt;% group_by(name) %&gt;% mutate(wgt = est_alive_today / sum(est_alive_today)) %&gt;% summarise( N = n(), est_num_alive = sum(est_alive_today), q1_age = wtd.quantile(age_today, est_alive_today, probs = 0.25, na.rm = TRUE), median_age = wtd.quantile(age_today, est_alive_today, probs = 0.5, na.rm = TRUE), q3_age = wtd.quantile(age_today, est_alive_today, probs = 0.75, na.rm = TRUE) ) %&gt;% arrange(desc(est_num_alive)) %&gt;% head(25) Setup the Plot We put the names along the x-axis in decreasing order of median age. w_plot &lt;- ggplot(data = com_fem, aes(x = reorder(name, -median_age), y = median_age)) + xlab(NULL) + ylab(&quot;Age (in years)&quot;) + ggtitle(&quot;Median ages for females with the 25 most common names&quot;) w_plot Add Linerange and color w_plot &lt;- w_plot + geom_linerange(aes(ymin = q1_age, ymax = q3_age), color = &quot;#f3d478&quot;, size = 10, alpha = 0.8) w_plot Add points at median w_plot &lt;- w_plot + geom_point(fill = &quot;#ed3324&quot;, colour = &quot;white&quot;, size = 4, shape = 21) w_plot Add Labels and Flip Coordinates w_plot &lt;- w_plot + geom_point(aes(y = 55, x = 24), fill = &quot;#ed3324&quot;, colour = &quot;white&quot;, size = 4, shape = 21) + geom_text(aes(y = 58, x = 24, label = &quot;median&quot;)) + geom_text(aes(y = 26, x = 16, label = &quot;25th&quot;)) + geom_text(aes(y = 51, x = 16, label = &quot;75th percentile&quot;)) + geom_point(aes(y = 24, x = 16), shape = 17) + geom_point(aes(y = 56, x = 16), shape = 17) + coord_flip() w_plot "],["data-wrangling.html", "Chapter 2 Data Wrangling 2.1 Filtering and Arranging Data, and Selecting Columns 2.2 Section 2.2 Mutating, Summarizing, and Grouping Data", " Chapter 2 Data Wrangling These notes pertain to chapter 5 in Wickham and Grolemund's text. We'll consider data from Major League Baseball, available through the Lahman() package. library(tidyverse) library(Lahman) select &lt;- dplyr::select summarize &lt;- dplyr::summarize We create a tibble with batting records for all MLB players from 1871-2020 batting &lt;- as_tibble(Lahman::Batting) head(batting) ## # A tibble: 6 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 abercda01 1871 1 TRO NA 1 4 0 0 0 0 0 ## 2 addybo01 1871 1 RC1 NA 25 118 30 32 6 0 0 ## 3 allisar01 1871 1 CL1 NA 29 137 28 40 4 5 0 ## 4 allisdo01 1871 1 WS3 NA 27 133 28 44 10 2 2 ## 5 ansonca01 1871 1 RC1 NA 25 120 29 39 11 3 0 ## 6 armstbo01 1871 1 FW1 NA 12 49 9 11 2 1 0 ## # … with 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, ## # IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt; tail(batting) ## # A tibble: 6 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 zimmebr01 2020 1 CLE AL 20 37 3 6 0 0 1 ## 2 zimmebr02 2020 1 BAL AL 2 0 0 0 0 0 0 ## 3 zimmejo02 2020 1 DET AL 3 0 0 0 0 0 0 ## 4 zimmeky01 2020 1 KCA AL 16 0 0 0 0 0 0 ## 5 zuberty01 2020 1 KCA AL 23 0 0 0 0 0 0 ## 6 zuninmi01 2020 1 TBA AL 28 75 8 11 4 0 4 ## # … with 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, ## # IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt; summary(batting) ## playerID yearID stint teamID lgID ## Length:108789 Min. :1871 Min. :1.000 CHN : 5060 AA: 1893 ## Class :character 1st Qu.:1937 1st Qu.:1.000 PHI : 4971 AL:50133 ## Mode :character Median :1976 Median :1.000 PIT : 4920 FL: 472 ## Mean :1967 Mean :1.079 SLN : 4853 NA: 737 ## 3rd Qu.:2001 3rd Qu.:1.000 CIN : 4731 NL:55071 ## Max. :2020 Max. :5.000 CLE : 4683 PL: 149 ## (Other):79571 UA: 334 ## G AB R H ## Min. : 1.00 Min. : 0.0 Min. : 0.00 Min. : 0.00 ## 1st Qu.: 12.00 1st Qu.: 4.0 1st Qu.: 0.00 1st Qu.: 0.00 ## Median : 34.00 Median : 46.0 Median : 4.00 Median : 8.00 ## Mean : 50.74 Mean :139.2 Mean : 18.48 Mean : 36.39 ## 3rd Qu.: 79.00 3rd Qu.:224.0 3rd Qu.: 27.00 3rd Qu.: 56.00 ## Max. :165.00 Max. :716.0 Max. :198.00 Max. :262.00 ## ## X2B X3B HR RBI ## Min. : 0.000 Min. : 0.000 Min. : 0.00 Min. : 0.00 ## 1st Qu.: 0.000 1st Qu.: 0.000 1st Qu.: 0.00 1st Qu.: 0.00 ## Median : 1.000 Median : 0.000 Median : 0.00 Median : 3.00 ## Mean : 6.202 Mean : 1.247 Mean : 2.85 Mean : 16.79 ## 3rd Qu.: 9.000 3rd Qu.: 1.000 3rd Qu.: 2.00 3rd Qu.: 24.00 ## Max. :67.000 Max. :36.000 Max. :73.00 Max. :191.00 ## NA&#39;s :756 ## SB CS BB SO ## Min. : 0.000 Min. : 0.000 Min. : 0.00 Min. : 0.00 ## 1st Qu.: 0.000 1st Qu.: 0.000 1st Qu.: 0.00 1st Qu.: 1.00 ## Median : 0.000 Median : 0.000 Median : 2.00 Median : 9.00 ## Mean : 2.919 Mean : 1.177 Mean : 12.84 Mean : 20.56 ## 3rd Qu.: 2.000 3rd Qu.: 1.000 3rd Qu.: 18.00 3rd Qu.: 29.00 ## Max. :138.000 Max. :42.000 Max. :232.00 Max. :223.00 ## NA&#39;s :2368 NA&#39;s :23541 NA&#39;s :2100 ## IBB HBP SH SF ## Min. : 0.00 Min. : 0.000 Min. : 0.000 Min. : 0.00 ## 1st Qu.: 0.00 1st Qu.: 0.000 1st Qu.: 0.000 1st Qu.: 0.00 ## Median : 0.00 Median : 0.000 Median : 0.000 Median : 0.00 ## Mean : 1.06 Mean : 1.058 Mean : 2.197 Mean : 1.02 ## 3rd Qu.: 1.00 3rd Qu.: 1.000 3rd Qu.: 3.000 3rd Qu.: 1.00 ## Max. :120.00 Max. :51.000 Max. :67.000 Max. :19.00 ## NA&#39;s :36650 NA&#39;s :2816 NA&#39;s :6068 NA&#39;s :36103 ## GIDP ## Min. : 0.000 ## 1st Qu.: 0.000 ## Median : 0.000 ## Mean : 2.893 ## 3rd Qu.: 4.000 ## Max. :36.000 ## NA&#39;s :25441 dim(batting) ## [1] 108789 22 2.1 Filtering and Arranging Data, and Selecting Columns The filter() command narrows a dataset to rows that meet a specified condition. The arrange() command sorts a dataset according to a specified ordering. The select() command narrows a dataset to a specified set of columns These commands are part of the dplyr R package, which itself is part of tidyverse. Example 2.1.1 Using the baseball data, create a tibble with only data from the most recent season available (2020). batting2020 &lt;- batting %&gt;% filter(yearID == 2020) head(batting2020) ## # A tibble: 6 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 abreual01 2020 1 NYA AL 2 0 0 0 0 0 0 ## 2 abreubr01 2020 1 HOU AL 4 0 0 0 0 0 0 ## 3 abreujo02 2020 1 CHA AL 60 240 43 76 15 0 19 ## 4 acunaro01 2020 1 ATL NL 46 160 46 40 11 0 14 ## 5 adamewi01 2020 1 TBA AL 54 185 29 48 15 1 8 ## 6 adamja01 2020 1 CHN NL 13 0 0 0 0 0 0 ## # … with 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, ## # IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt; An equivalent way to do this is: batting2020 &lt;- filter(batting, yearID == 2020) head(batting2020) ## # A tibble: 6 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 abreual01 2020 1 NYA AL 2 0 0 0 0 0 0 ## 2 abreubr01 2020 1 HOU AL 4 0 0 0 0 0 0 ## 3 abreujo02 2020 1 CHA AL 60 240 43 76 15 0 19 ## 4 acunaro01 2020 1 ATL NL 46 160 46 40 11 0 14 ## 5 adamewi01 2020 1 TBA AL 54 185 29 48 15 1 8 ## 6 adamja01 2020 1 CHN NL 13 0 0 0 0 0 0 ## # … with 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, ## # IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt; We'll use the first way, though. The %&gt;% operator (called pipe) has advantages and makes coding more convenient when stringing together multiple operations. Example 2.1.2 Create a tibble including only players who played for teams currently in the National League Central division: Milwaukee (MIL), Chicago Cubs (CHN), Pittsburgh (PIT), Cincinnati (CIN), and St. Louis (SLN). batting_NLCentral &lt;- batting %&gt;% filter(teamID %in% c(&quot;MIL&quot;, &quot;CHN&quot;, &quot;PIT&quot;, &quot;CIN&quot;, &quot;SNL&quot;)) head(batting_NLCentral) ## # A tibble: 6 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 addybo01 1876 1 CHN NL 32 142 36 40 4 1 0 ## 2 andrufr01 1876 1 CHN NL 8 36 6 11 3 0 0 ## 3 ansonca01 1876 1 CHN NL 66 309 63 110 9 7 2 ## 4 barnero01 1876 1 CHN NL 66 322 126 138 21 14 1 ## 5 bielaos01 1876 1 CHN NL 32 139 24 29 3 0 0 ## 6 glennjo01 1876 1 CHN NL 66 276 55 84 9 2 0 ## # … with 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, ## # IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt; Example 2.1.3 Order the entire baseball tibble from most homeruns to fewest. Note: we use desc() to sort in descending order. To sort in ascending order, simply put the name of the variable, i.e. HR. batting %&gt;% arrange(desc(HR)) ## # A tibble: 108,789 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 bondsba01 2001 1 SFN NL 153 476 129 156 32 2 73 ## 2 mcgwima01 1998 1 SLN NL 155 509 130 152 21 0 70 ## 3 sosasa01 1998 1 CHN NL 159 643 134 198 20 0 66 ## 4 mcgwima01 1999 1 SLN NL 153 521 118 145 21 1 65 ## 5 sosasa01 2001 1 CHN NL 160 577 146 189 34 5 64 ## 6 sosasa01 1999 1 CHN NL 162 625 114 180 24 2 63 ## 7 marisro01 1961 1 NYA AL 161 590 132 159 16 4 61 ## 8 ruthba01 1927 1 NYA AL 151 540 158 192 29 8 60 ## 9 ruthba01 1921 1 NYA AL 152 540 177 204 44 16 59 ## 10 stantmi03 2017 1 MIA NL 159 597 123 168 32 0 59 ## # … with 108,779 more rows, and 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, ## # CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, ## # GIDP &lt;int&gt; Example 2.1.4 Create a tibble that contains only the columns playerID, yearID, teamID, AB, H, and HR. batting1 &lt;- batting %&gt;% select(playerID, yearID, teamID, AB, H, HR) head(batting1) ## # A tibble: 6 x 6 ## playerID yearID teamID AB H HR ## &lt;chr&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 abercda01 1871 TRO 4 0 0 ## 2 addybo01 1871 RC1 118 32 0 ## 3 allisar01 1871 CL1 137 40 0 ## 4 allisdo01 1871 WS3 133 44 2 ## 5 ansonca01 1871 RC1 120 39 0 ## 6 armstbo01 1871 FW1 49 11 0 Example 2.1.5 The %&gt;% (pipe) operator allows us to string together multiple commands. Create a tibble including only players who batted at least 500 times in a season and played for Milwaukee (MIL) during or after the 2000 season. Include the columns playerID, yearID, and RBI, and order the players by most RBI to fewest. batting_MIL &lt;- batting %&gt;% filter(teamID == &quot;MIL&quot; &amp; yearID &gt;= 2000) %&gt;% select(playerID, yearID, RBI) %&gt;% arrange(desc(RBI)) head(batting_MIL) ## # A tibble: 6 x 3 ## playerID yearID RBI ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 fieldpr01 2009 141 ## 2 sexsori01 2001 125 ## 3 sexsori01 2003 124 ## 4 fieldpr01 2011 120 ## 5 fieldpr01 2007 119 ## 6 leeca01 2005 114 Practice 2.1.6 Create a subset of the data that includes only players who played in the American League (AL) after 1950. #Type code here Practice 2.1.7 Create a tibble containing all players, but only the variables playerID, yearID, &quot;G&quot;, &quot;H&quot;, and &quot;HR&quot;. #Type code here Practice 2.1.8 Order the rows from most hits in a season to fewest. #Type code here Example 2.1.9 Multiple Logicals The current Washington Nationals franchise previously played in Montreal from 1969-2004, and was known as the Expos. Create a dataset containing statistics for this franchise, including both its time in Montreal, and Washington. Arrange in descending order by number of homeruns. batting_MON_WAS &lt;- batting %&gt;% filter( (teamID==&quot;MON&quot; &amp; yearID &gt;= 1969 &amp; yearID &lt;= 2004) | (teamID==&quot;WAS&quot; &amp; yearID &gt;= 2005)) %&gt;% arrange(desc(HR)) batting_MON_WAS ## # A tibble: 2,242 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 soriaal01 2006 1 WAS NL 159 647 119 179 41 2 46 ## 2 guerrvl01 2000 1 MON NL 154 571 101 197 28 11 44 ## 3 guerrvl01 1999 1 MON NL 160 610 102 193 37 5 42 ## 4 harpebr03 2015 1 WAS NL 153 521 118 172 38 1 42 ## 5 guerrvl01 2002 1 MON NL 161 614 106 206 37 2 39 ## 6 guerrvl01 1998 1 MON NL 159 623 108 202 37 7 38 ## 7 dunnad01 2009 1 WAS NL 159 546 81 146 29 0 38 ## 8 dunnad01 2010 1 WAS NL 158 558 85 145 36 2 38 ## 9 rodrihe02 1996 1 MON NL 145 532 81 147 42 1 36 ## 10 zimmery01 2017 1 WAS NL 144 524 90 159 33 0 36 ## # … with 2,232 more rows, and 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, ## # BB &lt;int&gt;, SO &lt;int&gt;, IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt; head(batting_MON_WAS) ## # A tibble: 6 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 soriaal01 2006 1 WAS NL 159 647 119 179 41 2 46 ## 2 guerrvl01 2000 1 MON NL 154 571 101 197 28 11 44 ## 3 guerrvl01 1999 1 MON NL 160 610 102 193 37 5 42 ## 4 harpebr03 2015 1 WAS NL 153 521 118 172 38 1 42 ## 5 guerrvl01 2002 1 MON NL 161 614 106 206 37 2 39 ## 6 guerrvl01 1998 1 MON NL 159 623 108 202 37 7 38 ## # … with 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, ## # IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt; tail(batting_MON_WAS) ## # A tibble: 6 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 romerse01 2020 1 WAS NL 3 0 0 0 0 0 0 ## 2 sanchan01 2020 1 WAS NL 11 0 0 0 0 0 0 ## 3 scherma01 2020 1 WAS NL 12 0 0 0 0 0 0 ## 4 strasst01 2020 1 WAS NL 2 0 0 0 0 0 0 ## 5 suerowa01 2020 1 WAS NL 22 0 0 0 0 0 0 ## 6 vothau01 2020 1 WAS NL 11 0 0 0 0 0 0 ## # … with 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, ## # IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt; Example 2.1.10: Dealing with NA's For some batters, stolen base data (SB) were not available. Filter the dataset to only include rows for which stolen base data were available. The is.na() command returns TRUE/FALSE depending on whether the value is missing(NA). Here we use the negation operator !, since we want the rows that are not na's. battingSB &lt;- batting %&gt;% filter(!is.na(SB)) dim(battingSB) ## [1] 106421 22 dim(batting) ## [1] 108789 22 Practice 2.1.11 Create a tibble that contains only players who played in every one of their team's games in a season. Only consider seasons from 1904 on, since season length was highly variable prior to 1904. Note that beginning in 1904, teams played 154 games per season. In 1961, the American League (AL) expanded to 162 games. The National League expanded to 162 games in 1962. From 1962-2019, teams played 162 games per season. In 2020, teams only played 60 games, due to covid-19. # Enter code here Practice 2.1.12 Create a tibble that contains only players who played for Milwaukee in 2020, but contains statistics from all years in these player's careers, whether or not they played for Milwaukee. For example since Christian Yelich played for Milwaukee in 2020, all of his seasons should be included in the dataset, including 2013-2017, when he did not play for Milwaukee. Include the variables playerID, yearID, teamID, AB, H, and HR, and order the dataframe in descending order by homeruns (HR). #Enter code here 2.2 Section 2.2 Mutating, Summarizing, and Grouping Data The mutate and transmute functions allow us to create new variables in a dataset from old ones. Example 2.2.1 A player's batting average is defined as number of hits (H) divided by number of at-bats (AB). A player's on-base percentage is defined as number of hits (H), walks (BB), times hit by pitch (HBP), divided by number of at-bats, walks, times hit by pitch, and sacrifice flies (SF). A player's slugging percentage is defined as singles + 2doubles (X2B) + 3 triples (X3B) + 4 homeruns (HR) divided by number of at-bats. We'll create each of these variables. Note that since singles is not a variable in the dataset, we'll create it by subtracting doubles, triples, and homeruns from hits. batting %&gt;% mutate(AVG = H / AB, OBP = (H + BB + HBP) / (AB + BB + HBP +SF), X1B = H - X2B - X3B - HR, SLG = (X1B + 2*X2B + 3*X3B + 4* HR) / AB) %&gt;% select(playerID, yearID, teamID, AB, H, HR, BB, HBP, SF, AVG, OBP, SLG) ## # A tibble: 108,789 x 12 ## playerID yearID teamID AB H HR BB HBP SF AVG OBP SLG ## &lt;chr&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 abercda01 1871 TRO 4 0 0 0 NA NA 0 NA 0 ## 2 addybo01 1871 RC1 118 32 0 4 NA NA 0.271 NA 0.322 ## 3 allisar01 1871 CL1 137 40 0 2 NA NA 0.292 NA 0.394 ## 4 allisdo01 1871 WS3 133 44 2 0 NA NA 0.331 NA 0.481 ## 5 ansonca01 1871 RC1 120 39 0 2 NA NA 0.325 NA 0.467 ## 6 armstbo01 1871 FW1 49 11 0 0 NA NA 0.224 NA 0.306 ## 7 barkeal01 1871 RC1 4 1 0 1 NA NA 0.25 NA 0.25 ## 8 barnero01 1871 BS1 157 63 0 13 NA NA 0.401 NA 0.580 ## 9 barrebi01 1871 FW1 5 1 0 0 NA NA 0.2 NA 0.4 ## 10 barrofr01 1871 BS1 86 13 0 0 NA NA 0.151 NA 0.198 ## # … with 108,779 more rows While mutate displays all variables in the dataset, transmute displays only the ones created. batting %&gt;% transmute(AVG = H / AB, OBP = (H + BB + HBP) / (AB + BB + HBP +SF), X1B = H - X2B - X3B - HR, SLG = (X1B + 2*X2B + 3*X3B + 4* HR) / AB) ## # A tibble: 108,789 x 4 ## AVG OBP X1B SLG ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 0 NA 0 0 ## 2 0.271 NA 26 0.322 ## 3 0.292 NA 31 0.394 ## 4 0.331 NA 30 0.481 ## 5 0.325 NA 25 0.467 ## 6 0.224 NA 8 0.306 ## 7 0.25 NA 1 0.25 ## 8 0.401 NA 44 0.580 ## 9 0.2 NA 0 0.4 ## 10 0.151 NA 10 0.198 ## # … with 108,779 more rows Example 2.2.2 Create a new variable that indicates whether or not a player played for a team currently in the National League Central Division (MIL, CIN, CHN, CIN, PIT). batting %&gt;% mutate(NLCentral = ifelse(teamID %in%c(&quot;MIL&quot;, &quot;CIN&quot;, &quot;CHN&quot;, &quot;CIN&quot;, &quot;PIT&quot;), &quot;Yes&quot;, &quot;No&quot;)) %&gt;% select(playerID, yearID, teamID, NLCentral) ## # A tibble: 108,789 x 4 ## playerID yearID teamID NLCentral ## &lt;chr&gt; &lt;int&gt; &lt;fct&gt; &lt;chr&gt; ## 1 abercda01 1871 TRO No ## 2 addybo01 1871 RC1 No ## 3 allisar01 1871 CL1 No ## 4 allisdo01 1871 WS3 No ## 5 ansonca01 1871 RC1 No ## 6 armstbo01 1871 FW1 No ## 7 barkeal01 1871 RC1 No ## 8 barnero01 1871 BS1 No ## 9 barrebi01 1871 FW1 No ## 10 barrofr01 1871 BS1 No ## # … with 108,779 more rows 2.2.1 Summarize The summarize command calculates summary statistics for all variables in the dataset. The n() command returns the number of rows included in the summary. Example 2.2.3 Calculate the minimum, maximum, mean, median, and upper and lower quartiles for number stolen bases batting %&gt;% summarize(min_SB = min(SB), Q1_SB = quantile(SB, 0.25), median_SB = median(SB), Q3_SB = quantile(SB, 0.75), max_SB = max(SB), mean_SB =mean(SB), Number = n()) ## Error: Problem with `summarise()` input `Q1_SB`. ## x missing values and NaN&#39;s not allowed if &#39;na.rm&#39; is FALSE ## ℹ Input `Q1_SB` is `quantile(SB, 0.25)`. The quantities we desire cannot be calculated some players have missing values. We tell R to ignore missing values using the argument na.rm=TRUE. batting %&gt;% summarize(min_SB = min(SB, na.rm=TRUE), Q1_SB = quantile(SB, 0.25, na.rm=TRUE), median_SB = median(SB, na.rm=TRUE), Q3_SB = quantile(SB, 0.75, na.rm=TRUE), max_SB = max(SB, na.rm=TRUE), mean_SB =mean(SB, na.rm=TRUE), Number = sum(!is.na(SB))) ## # A tibble: 1 x 7 ## min_SB Q1_SB median_SB Q3_SB max_SB mean_SB Number ## &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 0 0 0 2 138 2.92 106421 Practice 2.2.4 Create a variable to calculate each player's stolen base success proportion (SB/(SB+CS)). #Enter Code Here Practice 2.2.5 Calculate the minimum, maximum, mean, median, and upper and lower quartiles for humber hits. Also give the total number of players in the dataset. #Enter Code Here Example 2.2.6 While overall summaries are sometimes useful, often it is far more useful to summarize by group. The group_by command allows us to calculate summary statistics broken down by group. Calculate the number of homeruns (HR), hits (H), and at-bats (AB) for by each team, throughout baseball history. When grouping, n() returns the number of observations in each group. batting %&gt;% group_by(teamID) %&gt;% summarize(HR = sum(HR), H= sum(H), AB= sum(AB), Total_Player_Seasons = n() ) %&gt;% arrange(desc(HR)) ## # A tibble: 149 x 5 ## teamID HR H AB Total_Player_Seasons ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 NYA 16309 166924 626513 4471 ## 2 CHN 14449 194194 739897 5060 ## 3 DET 13904 169123 637722 4413 ## 4 BOS 13793 170584 638385 4515 ## 5 PHI 13321 187367 718794 4971 ## 6 CIN 13255 179875 688343 4731 ## 7 CLE 13228 168997 636579 4683 ## 8 SLN 12046 181892 682991 4853 ## 9 CHA 11606 164533 632007 4476 ## 10 PIT 11564 187060 706152 4920 ## # … with 139 more rows While we might be interested in knowing the number of total player seasons for each team, it might be more interesting to know the number of different batters who have played for each team. We can accomplish this using the unique() function. The command unique(playerID) creates a vector of unique player ID's for each team. The length() command returns the length of each vector (i.e. number of different batters). batting %&gt;% group_by(teamID) %&gt;% summarize(HR = sum(HR), H= sum(H), AB= sum(AB), Total_Batters = length(unique(playerID)) ) %&gt;% arrange(desc(HR)) ## # A tibble: 149 x 5 ## teamID HR H AB Total_Batters ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 NYA 16309 166924 626513 1709 ## 2 CHN 14449 194194 739897 2117 ## 3 DET 13904 169123 637722 1718 ## 4 BOS 13793 170584 638385 1838 ## 5 PHI 13321 187367 718794 2103 ## 6 CIN 13255 179875 688343 1977 ## 7 CLE 13228 168997 636579 1917 ## 8 SLN 12046 181892 682991 2024 ## 9 CHA 11606 164533 632007 1807 ## 10 PIT 11564 187060 706152 1945 ## # … with 139 more rows Example 2.2.7 Calculate each team's all-time batting average. Include only teams with at least 100,000 at-bats. Sort by batting average. batting %&gt;% group_by(teamID) %&gt;% summarize(HR = sum(HR), H= sum(H), AB= sum(AB), Total_Batters = length(unique(playerID)), AVG = H / AB ) %&gt;% filter(AB &gt; 100000) %&gt;% arrange(desc(AVG)) ## # A tibble: 39 x 6 ## teamID HR H AB Total_Batters AVG ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 COL 5013 41243 150606 593 0.274 ## 2 NY1 5776 103368 381156 894 0.271 ## 3 BOS 13793 170584 638385 1838 0.267 ## 4 BRO 4338 93508 350213 875 0.267 ## 5 NYA 16309 166924 626513 1709 0.266 ## 6 SLN 12046 181892 682991 2024 0.266 ## 7 PHA 3502 74209 278843 783 0.266 ## 8 CLE 13228 168997 636579 1917 0.265 ## 9 DET 13904 169123 637722 1718 0.265 ## 10 PIT 11564 187060 706152 1945 0.265 ## # … with 29 more rows Example 2.2.8 Some of these teams do not exist anymore, while others came about more recently. Let's include the earliest and latest year that each team played. batting %&gt;% group_by(teamID) %&gt;% summarize(HR = sum(HR), H= sum(H), AB= sum(AB), Total_Batters = length(unique(playerID)), AVG = H / AB, First_Year = min(yearID), Last_Year = max(yearID) ) %&gt;% filter(AB &gt; 100000) %&gt;% arrange(desc(AVG)) ## # A tibble: 39 x 8 ## teamID HR H AB Total_Batters AVG First_Year Last_Year ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 COL 5013 41243 150606 593 0.274 1993 2020 ## 2 NY1 5776 103368 381156 894 0.271 1883 1957 ## 3 BOS 13793 170584 638385 1838 0.267 1901 2020 ## 4 BRO 4338 93508 350213 875 0.267 1890 1957 ## 5 NYA 16309 166924 626513 1709 0.266 1903 2020 ## 6 SLN 12046 181892 682991 2024 0.266 1892 2020 ## 7 PHA 3502 74209 278843 783 0.266 1901 1954 ## 8 CLE 13228 168997 636579 1917 0.265 1901 2020 ## 9 DET 13904 169123 637722 1718 0.265 1901 2020 ## 10 PIT 11564 187060 706152 1945 0.265 1887 2020 ## # … with 29 more rows Example 2.2.9 We can group by more than one variable. Let's calculate the number of hits, homeruns, and at-bats, and batting average for each team in each season. batting %&gt;% group_by(teamID, yearID) %&gt;% summarize(HR = sum(HR), H= sum(H), AB= sum(AB), AVG = H / AB ) %&gt;% arrange(desc(HR)) ## # A tibble: 2,955 x 6 ## # Groups: teamID [149] ## teamID yearID HR H AB AVG ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 MIN 2019 307 1547 5732 0.270 ## 2 NYA 2019 306 1493 5583 0.267 ## 3 HOU 2019 288 1538 5613 0.274 ## 4 LAN 2019 279 1414 5493 0.257 ## 5 NYA 2018 267 1374 5515 0.249 ## 6 SEA 1997 264 1574 5614 0.280 ## 7 TEX 2005 260 1528 5716 0.267 ## 8 BAL 1996 257 1557 5689 0.274 ## 9 OAK 2019 257 1384 5561 0.249 ## 10 TOR 2010 257 1364 5495 0.248 ## # … with 2,945 more rows Practice 2.2.10 Calculate the total number of at-bats (AB), hits (H), and homeruns (HR) for each player throughout their career. Also calculate their career batting average (H / AB). Sort the dataset from most hits to fewest. #Enter Code Here Practice 2.2.11 Calculate the total number of records (rows) for each player in the dataset. Order from most to least. Also include the player's first and last season. Note that some players played non-consecutive seasons, so the number of records will not necessarily equal the difference between the first and last seasons. #Enter Code Here Practice 2.2.12 The total number of records for each player is not quite equal to their total number of seasons played, since players sometimes play for more than one team in a season. Calculate the total number of seasons played by each player. #Enter Code Here Practice 2.2.13 Calculate the average number of stolen bases and homeruns per team for each year since 1871. For example, the average number of homeruns per team was 226. #Enter Code Here Plot the average number of homeruns and stolen bases against year. #Enter Code Here #Enter Code Here "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
